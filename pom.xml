<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>rauljosepalma</groupId>
  <artifactId>spark-fs</artifactId>
  <version>0.1.0</version>
  <name>${project.artifactId}</name>
  <description>Various Feature Selection techniques in Spark</description>
  <inceptionYear>2016</inceptionYear>
  <licenses>
    <license>
      <name>My License</name>
      <url>http://....</url>
      <distribution>repo</distribution>
    </license>
  </licenses>

  <properties>
    <maven.compiler.source>1.6</maven.compiler.source>
    <maven.compiler.target>1.6</maven.compiler.target>
    <encoding>UTF-8</encoding>
    <scala.version>2.10.5</scala.version>
    <scala.compat.version>2.10</scala.compat.version>
    <!-- <scala.tools.version>2.10</scala.tools.version> -->
  </properties>

  <dependencies>
    <!--<dependency>
      <groupId>org.scala-lang</groupId>
      <artifactId>scala-library</artifactId>
      <version>${scala.version}</version>
    </dependency> -->
    <dependency>
      <groupId>org.apache.spark</groupId>
      <artifactId>spark-core_2.10</artifactId>
      <version>1.6.0</version>
      <scope>provided</scope>
    </dependency>
    <!-- MLlib is necessary to access LabeledPoint for example -->
    <dependency>
      <groupId>org.apache.spark</groupId>
      <artifactId>spark-mllib_2.10</artifactId>
      <version>1.6.0</version>
      <scope>provided</scope>
    </dependency>

    <!-- Test -->
    <!-- <dependency>
      <groupId>org.scalatest</groupId>
      <artifactId>scalatest_${scala.tools.version}</artifactId>
      <version>2.2.4</version>
      <scope>test</scope>
    </dependency> -->
  </dependencies>

  <build>
    <sourceDirectory>src/main/scala</sourceDirectory>
    <testSourceDirectory>src/test/scala</testSourceDirectory>
    <plugins>
      <plugin>
        <!-- see http://davidb.github.com/scala-maven-plugin -->
        <groupId>net.alchim31.maven</groupId>
        <artifactId>scala-maven-plugin</artifactId>
        <version>3.2.0</version>
        <executions>
          <execution>
            <goals>
              <goal>compile</goal>
              <goal>testCompile</goal>
            </goals>
            <configuration>
              <args>
                <!-- -depreaction was added because of a warning asking for it
                     after adding the arg the warning says -make is deprecated-->
                <arg>-deprecation</arg>
                <arg>-make:transitive</arg>
                <arg>-dependencyfile</arg>
                <arg>${project.build.directory}/.scala_dependencies</arg>
              </args>
            </configuration>
          </execution>
        </executions>


        <configuration>

          <!-- Prevent warning about different libraries being used
          when dependecies are compatible: ex.: 2.10.4 and 2.10.5  -->
          <scalaCompatVersion>${scala.compat.version}</scalaCompatVersion>
          
          <!-- This was added to be able to use scala:run goal check 
          scala-maven-plugin section: Running -->
          <launchers>
            <launcher>
              <id>Main</id>
              <mainClass>sparkfs.Main</mainClass>
              <!-- args are optional -->
              <!-- <args>
                <arg>arg1</arg>
              </args> -->
              <!-- jvmArgs are optional -->
              <!-- <jvmArgs>
                <jvmArg>-Xmx128m</jvmArg>
                <jvmArg>-Djava.library.path=...</jvmArg>
              </jvmArgs> -->
            </launcher>
            <!-- you could define other launcher -->
          </launchers>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.18.1</version>
        <configuration>
          <useFile>false</useFile>
          <disableXmlReport>true</disableXmlReport>
          <!-- If you have classpath issue like NoDefClassError,... -->
          <!-- useManifestOnlyJar>false</useManifestOnlyJar -->
          <includes>
            <include>**/*Test.*</include>
            <include>**/*Suite.*</include>
          </includes>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>2.4.3</version>
      </plugin>
    </plugins>
  </build>
</project>